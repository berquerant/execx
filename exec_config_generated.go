// Code generated by "goconfig -field StdoutConsumer func(string)|StderrConsumer func(string) -option -output exec_config_generated.go -configOption Option"; DO NOT EDIT.

package execx

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	StdoutConsumer *ConfigItem[func(string)]
	StderrConsumer *ConfigItem[func(string)]
}
type ConfigBuilder struct {
	stdoutConsumer func(string)
	stderrConsumer func(string)
}

func (s *ConfigBuilder) StdoutConsumer(v func(string)) *ConfigBuilder {
	s.stdoutConsumer = v
	return s
}
func (s *ConfigBuilder) StderrConsumer(v func(string)) *ConfigBuilder {
	s.stderrConsumer = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		StdoutConsumer: NewConfigItem(s.stdoutConsumer),
		StderrConsumer: NewConfigItem(s.stderrConsumer),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...Option) {
	for _, x := range opt {
		x(s)
	}
}

type Option func(*Config)

func WithStdoutConsumer(v func(string)) Option {
	return func(c *Config) {
		c.StdoutConsumer.Set(v)
	}
}
func WithStderrConsumer(v func(string)) Option {
	return func(c *Config) {
		c.StderrConsumer.Set(v)
	}
}
